
yuwakashiki.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000b02  00000b96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800110  00800110  00000ba6  2**0
                  ALLOC
  3 .stab         000024c0  00000000  00000000  00000ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000935  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000399d  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000088  00000000  00000000  000039cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000929  00000000  00000000  00003a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002cc  00000000  00000000  0000437d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000484  00000000  00000000  00004649  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00004ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001e6  00000000  00000000  00004c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004ad  00000000  00000000  00004e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  000052c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	8b c0       	rjmp	.+278    	; 0x134 <__vector_14>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 e0       	ldi	r30, 0x02	; 2
  48:	fb e0       	ldi	r31, 0x0B	; 11
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 31       	cpi	r26, 0x10	; 16
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	a0 e1       	ldi	r26, 0x10	; 16
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a1 32       	cpi	r26, 0x21	; 33
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	94 d2       	rcall	.+1320   	; 0x590 <main>
  68:	4a c5       	rjmp	.+2708   	; 0xafe <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <alarm>:
0b01111111, 0b01101111};

//アラームを鳴らす関数(ピッピー)
void alarm(char num) {
	
	for (char i = 0; i < num; i++){
  6c:	88 23       	and	r24, r24
  6e:	31 f1       	breq	.+76     	; 0xbc <alarm+0x50>
  70:	90 e0       	ldi	r25, 0x00	; 0

		PORTC = PORTC | 0b00000010;
  72:	41 9a       	sbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	e7 ea       	ldi	r30, 0xA7	; 167
  76:	f1 e6       	ldi	r31, 0x61	; 97
  78:	31 97       	sbiw	r30, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <alarm+0xc>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <alarm+0x12>
  7e:	00 00       	nop
		_delay_ms(100);
		PORTC = PORTC & 0b11111101;
  80:	41 98       	cbi	0x08, 1	; 8
  82:	e7 ea       	ldi	r30, 0xA7	; 167
  84:	f1 e6       	ldi	r31, 0x61	; 97
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <alarm+0x1a>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <alarm+0x20>
  8c:	00 00       	nop
		_delay_ms(100);
		PORTC = PORTC | 0b00000010;
  8e:	41 9a       	sbi	0x08, 1	; 8
  90:	ff e7       	ldi	r31, 0x7F	; 127
  92:	28 e3       	ldi	r18, 0x38	; 56
  94:	31 e0       	ldi	r19, 0x01	; 1
  96:	f1 50       	subi	r31, 0x01	; 1
  98:	20 40       	sbci	r18, 0x00	; 0
  9a:	30 40       	sbci	r19, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <alarm+0x2a>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <alarm+0x34>
  a0:	00 00       	nop
		_delay_ms(400);
		PORTC = PORTC & 0b11111101;
  a2:	41 98       	cbi	0x08, 1	; 8
  a4:	4f e7       	ldi	r20, 0x7F	; 127
  a6:	e8 e3       	ldi	r30, 0x38	; 56
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	41 50       	subi	r20, 0x01	; 1
  ac:	e0 40       	sbci	r30, 0x00	; 0
  ae:	f0 40       	sbci	r31, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <alarm+0x3e>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <alarm+0x48>
  b4:	00 00       	nop
0b01111111, 0b01101111};

//アラームを鳴らす関数(ピッピー)
void alarm(char num) {
	
	for (char i = 0; i < num; i++){
  b6:	9f 5f       	subi	r25, 0xFF	; 255
  b8:	98 13       	cpse	r25, r24
  ba:	db cf       	rjmp	.-74     	; 0x72 <alarm+0x6>
  bc:	08 95       	ret

000000be <se>:
}

//操作音を鳴らす関数2(ピッ)
void se(char num) {
	
	for (char i = 0; i < num; i++){
  be:	88 23       	and	r24, r24
  c0:	91 f0       	breq	.+36     	; 0xe6 <se+0x28>
  c2:	90 e0       	ldi	r25, 0x00	; 0

		PORTC = PORTC | 0b00000010;
  c4:	41 9a       	sbi	0x08, 1	; 8
  c6:	e3 ed       	ldi	r30, 0xD3	; 211
  c8:	f0 e3       	ldi	r31, 0x30	; 48
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <se+0xc>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <se+0x12>
  d0:	00 00       	nop
		_delay_ms(50);
		PORTC = PORTC & 0b11111101;
  d2:	41 98       	cbi	0x08, 1	; 8
  d4:	e3 ed       	ldi	r30, 0xD3	; 211
  d6:	f0 e3       	ldi	r31, 0x30	; 48
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <se+0x1a>
  dc:	00 c0       	rjmp	.+0      	; 0xde <se+0x20>
  de:	00 00       	nop
}

//操作音を鳴らす関数2(ピッ)
void se(char num) {
	
	for (char i = 0; i < num; i++){
  e0:	9f 5f       	subi	r25, 0xFF	; 255
  e2:	98 13       	cpse	r25, r24
  e4:	ef cf       	rjmp	.-34     	; 0xc4 <se+0x6>
  e6:	08 95       	ret

000000e8 <display>:

}

void display (void) {

	switch( mode ) {
  e8:	80 91 0e 01 	lds	r24, 0x010E
  ec:	82 30       	cpi	r24, 0x02	; 2
  ee:	61 f0       	breq	.+24     	; 0x108 <display+0x20>
  f0:	83 30       	cpi	r24, 0x03	; 3
  f2:	c1 f0       	breq	.+48     	; 0x124 <display+0x3c>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	e9 f4       	brne	.+58     	; 0x132 <display+0x4a>

		case MODE_TARGET:
		count = target;
  f8:	80 91 20 01 	lds	r24, 0x0120
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	90 93 11 01 	sts	0x0111, r25
 102:	80 93 10 01 	sts	0x0110, r24
		break;
 106:	08 95       	ret

		case MODE_MONITOR:
		count = temp;
 108:	60 91 19 01 	lds	r22, 0x0119
 10c:	70 91 1a 01 	lds	r23, 0x011A
 110:	80 91 1b 01 	lds	r24, 0x011B
 114:	90 91 1c 01 	lds	r25, 0x011C
 118:	8b d3       	rcall	.+1814   	; 0x830 <__fixunssfsi>
 11a:	70 93 11 01 	sts	0x0111, r23
 11e:	60 93 10 01 	sts	0x0110, r22
		break;
 122:	08 95       	ret

		case MODE_TIMER:
		count = timer;
 124:	80 91 17 01 	lds	r24, 0x0117
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	90 93 11 01 	sts	0x0111, r25
 12e:	80 93 10 01 	sts	0x0110, r24
 132:	08 95       	ret

00000134 <__vector_14>:
		break;

	}
}

ISR (TIMER0_COMPA_vect) {
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	3f 93       	push	r19
 142:	4f 93       	push	r20
 144:	5f 93       	push	r21
 146:	6f 93       	push	r22
 148:	7f 93       	push	r23
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	cf 93       	push	r28
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31

	static unsigned char sel = 0;
	unsigned char dig1, dig10;

	dig1  = seg[count % 10];
 158:	40 91 10 01 	lds	r20, 0x0110
 15c:	50 91 11 01 	lds	r21, 0x0111
 160:	9a 01       	movw	r18, r20
 162:	ad ec       	ldi	r26, 0xCD	; 205
 164:	bc ec       	ldi	r27, 0xCC	; 204
 166:	a9 d4       	rcall	.+2386   	; 0xaba <__umulhisi3>
 168:	96 95       	lsr	r25
 16a:	87 95       	ror	r24
 16c:	96 95       	lsr	r25
 16e:	87 95       	ror	r24
 170:	96 95       	lsr	r25
 172:	87 95       	ror	r24
 174:	9c 01       	movw	r18, r24
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	82 0f       	add	r24, r18
 188:	93 1f       	adc	r25, r19
 18a:	48 1b       	sub	r20, r24
 18c:	59 0b       	sbc	r21, r25
 18e:	fa 01       	movw	r30, r20
 190:	e0 50       	subi	r30, 0x00	; 0
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	c0 81       	ld	r28, Z
	dig10 = seg[(count / 10) % 10];
 196:	20 91 10 01 	lds	r18, 0x0110
 19a:	30 91 11 01 	lds	r19, 0x0111
 19e:	8d d4       	rcall	.+2330   	; 0xaba <__umulhisi3>
 1a0:	ac 01       	movw	r20, r24
 1a2:	56 95       	lsr	r21
 1a4:	47 95       	ror	r20
 1a6:	56 95       	lsr	r21
 1a8:	47 95       	ror	r20
 1aa:	56 95       	lsr	r21
 1ac:	47 95       	ror	r20
 1ae:	9a 01       	movw	r18, r20
 1b0:	84 d4       	rcall	.+2312   	; 0xaba <__umulhisi3>
 1b2:	96 95       	lsr	r25
 1b4:	87 95       	ror	r24
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	96 95       	lsr	r25
 1bc:	87 95       	ror	r24
 1be:	9c 01       	movw	r18, r24
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	82 0f       	add	r24, r18
 1d2:	93 1f       	adc	r25, r19
 1d4:	48 1b       	sub	r20, r24
 1d6:	59 0b       	sbc	r21, r25
 1d8:	fa 01       	movw	r30, r20
 1da:	e0 50       	subi	r30, 0x00	; 0
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	90 81       	ld	r25, Z

	switch( sel ) {
 1e0:	80 91 1f 01 	lds	r24, 0x011F
 1e4:	88 23       	and	r24, r24
 1e6:	19 f0       	breq	.+6      	; 0x1ee <__vector_14+0xba>
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	b9 f4       	brne	.+46     	; 0x21a <__vector_14+0xe6>
 1ec:	0c c0       	rjmp	.+24     	; 0x206 <__vector_14+0xd2>

		case 0:
		PORTD = PORTD | 0b00000001;
 1ee:	58 9a       	sbi	0x0b, 0	; 11
		PORTD = PORTD & 0b11111101;
 1f0:	59 98       	cbi	0x0b, 1	; 11
		PORTB = dig1;
 1f2:	c5 b9       	out	0x05, r28	; 5

		//タイマーモードなら"."を表示
		//この信号は7セグに繋がってないので実際には一番右の小数点は点灯しない。
		//しかし、タイマーモード表示用LEDと兼用のため、点灯の信号を送っている。
		if( mode == MODE_TIMER ) {
 1f4:	80 91 0e 01 	lds	r24, 0x010E
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	19 f4       	brne	.+6      	; 0x202 <__vector_14+0xce>
			PORTB = 0b10000000 | dig1;
 1fc:	c0 68       	ori	r28, 0x80	; 128
 1fe:	c5 b9       	out	0x05, r28	; 5
 200:	0c c0       	rjmp	.+24     	; 0x21a <__vector_14+0xe6>
			}else{
			PORTB = dig1;
 202:	c5 b9       	out	0x05, r28	; 5
 204:	0a c0       	rjmp	.+20     	; 0x21a <__vector_14+0xe6>
		}

		break;
		case 1:
		PORTD = PORTD | 0b00000010;
 206:	59 9a       	sbi	0x0b, 1	; 11
		PORTD = PORTD & 0b11111110;
 208:	58 98       	cbi	0x0b, 0	; 11

		//タイマーモードなら"."を表示
		if( mode == MODE_TIMER ) {
 20a:	80 91 0e 01 	lds	r24, 0x010E
 20e:	83 30       	cpi	r24, 0x03	; 3
 210:	19 f4       	brne	.+6      	; 0x218 <__vector_14+0xe4>
			PORTB = 0b10000000 | dig10;
 212:	90 68       	ori	r25, 0x80	; 128
 214:	95 b9       	out	0x05, r25	; 5
 216:	01 c0       	rjmp	.+2      	; 0x21a <__vector_14+0xe6>
			}else{
			PORTB = dig10;
 218:	95 b9       	out	0x05, r25	; 5
		
		break;

	}

	sel++;
 21a:	80 91 1f 01 	lds	r24, 0x011F
 21e:	8f 5f       	subi	r24, 0xFF	; 255

	if( sel == 2 ) {
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	19 f0       	breq	.+6      	; 0x22a <__vector_14+0xf6>
		
		break;

	}

	sel++;
 224:	80 93 1f 01 	sts	0x011F, r24
 228:	02 c0       	rjmp	.+4      	; 0x22e <__vector_14+0xfa>

	if( sel == 2 ) {
		sel = 0;
 22a:	10 92 1f 01 	sts	0x011F, r1
	}
	
	//保温モードなら
	if( started == 2 ) {
 22e:	80 91 1e 01 	lds	r24, 0x011E
 232:	82 30       	cpi	r24, 0x02	; 2
 234:	09 f0       	breq	.+2      	; 0x238 <__vector_14+0x104>
 236:	48 c0       	rjmp	.+144    	; 0x2c8 <__vector_14+0x194>
		time_count += 5;
 238:	80 91 13 01 	lds	r24, 0x0113
 23c:	90 91 14 01 	lds	r25, 0x0114
 240:	a0 91 15 01 	lds	r26, 0x0115
 244:	b0 91 16 01 	lds	r27, 0x0116
 248:	05 96       	adiw	r24, 0x05	; 5
 24a:	a1 1d       	adc	r26, r1
 24c:	b1 1d       	adc	r27, r1
 24e:	80 93 13 01 	sts	0x0113, r24
 252:	90 93 14 01 	sts	0x0114, r25
 256:	a0 93 15 01 	sts	0x0115, r26
 25a:	b0 93 16 01 	sts	0x0116, r27
		//time_countが30分の値に達したら
		if( time_count == half_hour ) {
 25e:	40 91 0a 01 	lds	r20, 0x010A
 262:	50 91 0b 01 	lds	r21, 0x010B
 266:	60 91 0c 01 	lds	r22, 0x010C
 26a:	70 91 0d 01 	lds	r23, 0x010D
 26e:	84 17       	cp	r24, r20
 270:	95 07       	cpc	r25, r21
 272:	a6 07       	cpc	r26, r22
 274:	b7 07       	cpc	r27, r23
 276:	b1 f4       	brne	.+44     	; 0x2a4 <__vector_14+0x170>
			//カウントを0に戻し、
			time_count = 0;
 278:	10 92 13 01 	sts	0x0113, r1
 27c:	10 92 14 01 	sts	0x0114, r1
 280:	10 92 15 01 	sts	0x0115, r1
 284:	10 92 16 01 	sts	0x0116, r1
			//タイマーの時間を0.5時間減らす
			timer -= 5;
 288:	80 91 17 01 	lds	r24, 0x0117
 28c:	85 50       	subi	r24, 0x05	; 5
 28e:	80 93 17 01 	sts	0x0117, r24
			//7セグLEDを表示
			display();
 292:	2a df       	rcall	.-428    	; 0xe8 <display>
			//タイマーの時間が0になったら
			if( timer == 0 ) {
 294:	80 91 17 01 	lds	r24, 0x0117
 298:	81 11       	cpse	r24, r1
 29a:	04 c0       	rjmp	.+8      	; 0x2a4 <__vector_14+0x170>
				//スタート
				started = 1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	80 93 1e 01 	sts	0x011E, r24
				PORTD = PORTD | 0b00001000;//ON
 2a2:	5b 9a       	sbi	0x0b, 3	; 11
			}
		}

		//スタートLEDを点滅させる
		wink_count++;
 2a4:	80 91 12 01 	lds	r24, 0x0112
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
		if( wink_count == 128 ) {
 2aa:	80 38       	cpi	r24, 0x80	; 128
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <__vector_14+0x180>
				PORTD = PORTD | 0b00001000;//ON
			}
		}

		//スタートLEDを点滅させる
		wink_count++;
 2ae:	80 93 12 01 	sts	0x0112, r24
 2b2:	0a c0       	rjmp	.+20     	; 0x2c8 <__vector_14+0x194>
		if( wink_count == 128 ) {
			wink_count =0;
 2b4:	10 92 12 01 	sts	0x0112, r1
			if( PORTD == (PORTD & 0b11110111) ) {
 2b8:	9b b1       	in	r25, 0x0b	; 11
 2ba:	8b b1       	in	r24, 0x0b	; 11
 2bc:	87 7f       	andi	r24, 0xF7	; 247
 2be:	98 13       	cpse	r25, r24
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <__vector_14+0x192>
				PORTD =   PORTD | 0b00001000;
 2c2:	5b 9a       	sbi	0x0b, 3	; 11
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <__vector_14+0x194>
				}else{
				PORTD =   PORTD & 0b11110111;
 2c6:	5b 98       	cbi	0x0b, 3	; 11
			}
		}
	}
	
}
 2c8:	ff 91       	pop	r31
 2ca:	ef 91       	pop	r30
 2cc:	cf 91       	pop	r28
 2ce:	bf 91       	pop	r27
 2d0:	af 91       	pop	r26
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	7f 91       	pop	r23
 2d8:	6f 91       	pop	r22
 2da:	5f 91       	pop	r21
 2dc:	4f 91       	pop	r20
 2de:	3f 91       	pop	r19
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <heater_on>:

//SSR ON→機械式リレーON→SSR OFFの順にヒーターをONにする関数
void heater_on(void) {
	
	//機械式リレーがOFFなら
	if( (PORTD & 0b10000000) == 0 ) {
 2ec:	5f 99       	sbic	0x0b, 7	; 11
 2ee:	08 c0       	rjmp	.+16     	; 0x300 <heater_on+0x14>
		//まずSSRをON
		PORTD = PORTD | 0b00010000;//SSR ON
 2f0:	5c 9a       	sbi	0x0b, 4	; 11
 2f2:	8f e4       	ldi	r24, 0x4F	; 79
 2f4:	93 ec       	ldi	r25, 0xC3	; 195
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <heater_on+0xa>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <heater_on+0x10>
 2fc:	00 00       	nop

		//やや遅れて機械式リレーON
		_delay_ms(ARC_PROTECT_DELAY);
		PORTD = PORTD | 0b10000000;//機械式リレーON
 2fe:	5f 9a       	sbi	0x0b, 7	; 11
 300:	08 95       	ret

00000302 <heater_off>:

//SSR ON→機械式リレーOFF→SSR OFFの順にヒーターをOFFにする関数
void heater_off(void) {
	
	//機械式リレーがONなら
	if( (PORTD & 0b10000000) != 0 ) {
 302:	5f 9b       	sbis	0x0b, 7	; 11
 304:	08 c0       	rjmp	.+16     	; 0x316 <heater_off+0x14>
		//まず機械式リレーOFF
		PORTD = PORTD & 0b01111111;//機械式リレーOFF
 306:	5f 98       	cbi	0x0b, 7	; 11
 308:	8f e4       	ldi	r24, 0x4F	; 79
 30a:	93 ec       	ldi	r25, 0xC3	; 195
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <heater_off+0xa>
 310:	00 c0       	rjmp	.+0      	; 0x312 <heater_off+0x10>
 312:	00 00       	nop

		//さらにやや遅れてSSRをOFF
		_delay_ms(ARC_PROTECT_DELAY);
		PORTD = PORTD & 0b11101111;//SSR OFF
 314:	5c 98       	cbi	0x0b, 4	; 11
 316:	08 95       	ret

00000318 <heater_control>:

//ヒーター(PD4)のON/OFFを制御する関数
void heater_control(void) {
	
	//スタート状態なら
	if( started == 1 ) {
 318:	80 91 1e 01 	lds	r24, 0x011E
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	c1 f5       	brne	.+112    	; 0x390 <heater_control+0x78>
		//現在温度が設定温度より上回っているなら
		if( is_over ) {
 320:	80 91 18 01 	lds	r24, 0x0118
 324:	88 23       	and	r24, r24
 326:	b9 f0       	breq	.+46     	; 0x356 <heater_control+0x3e>
			//現在温度が設定温度より低ければ
			if( temp <= ((float)target)  ) {
 328:	60 91 20 01 	lds	r22, 0x0120
 32c:	70 e0       	ldi	r23, 0x00	; 0
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	aa d2       	rcall	.+1364   	; 0x888 <__floatunsisf>
 334:	20 91 19 01 	lds	r18, 0x0119
 338:	30 91 1a 01 	lds	r19, 0x011A
 33c:	40 91 1b 01 	lds	r20, 0x011B
 340:	50 91 1c 01 	lds	r21, 0x011C
 344:	2f d3       	rcall	.+1630   	; 0x9a4 <__gesf2>
 346:	88 23       	and	r24, r24
 348:	24 f0       	brlt	.+8      	; 0x352 <heater_control+0x3a>
				heater_on();
 34a:	d0 df       	rcall	.-96     	; 0x2ec <heater_on>
				is_over = 0;
 34c:	10 92 18 01 	sts	0x0118, r1
 350:	08 95       	ret
				}else{
				heater_off();
 352:	d7 df       	rcall	.-82     	; 0x302 <heater_off>
 354:	08 95       	ret
			}
			}else{
			//現在温度が設定温度より下回っているなら
			//現在温度が設定温度+0.5℃より低ければ
			if( temp <= ((float)target + 0.5) ) {
 356:	60 91 20 01 	lds	r22, 0x0120
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	93 d2       	rcall	.+1318   	; 0x888 <__floatunsisf>
 362:	20 e0       	ldi	r18, 0x00	; 0
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	5f e3       	ldi	r21, 0x3F	; 63
 36a:	96 d1       	rcall	.+812    	; 0x698 <__addsf3>
 36c:	20 91 19 01 	lds	r18, 0x0119
 370:	30 91 1a 01 	lds	r19, 0x011A
 374:	40 91 1b 01 	lds	r20, 0x011B
 378:	50 91 1c 01 	lds	r21, 0x011C
 37c:	13 d3       	rcall	.+1574   	; 0x9a4 <__gesf2>
 37e:	88 23       	and	r24, r24
 380:	14 f0       	brlt	.+4      	; 0x386 <heater_control+0x6e>
				heater_on();
 382:	b4 df       	rcall	.-152    	; 0x2ec <heater_on>
 384:	08 95       	ret
				}else{
				heater_off();
 386:	bd df       	rcall	.-134    	; 0x302 <heater_off>
				is_over = 1;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 18 01 	sts	0x0118, r24
 38e:	08 95       	ret
			}
		}
		}else{
		//スタート状態じゃなかったら
		heater_off();
 390:	b8 df       	rcall	.-144    	; 0x302 <heater_off>
 392:	08 95       	ret

00000394 <change_start>:

//スタートとストップを切り替える関数
void change_start (void) {
	
	//切り替える
	if( started == 0 ) {
 394:	80 91 1e 01 	lds	r24, 0x011E
 398:	81 11       	cpse	r24, r1
 39a:	17 c0       	rjmp	.+46     	; 0x3ca <change_start+0x36>
		//タイマーに数値がセットされていなければ1、セットされていれば2。
		if( timer == 0 ) {
 39c:	80 91 17 01 	lds	r24, 0x0117
 3a0:	81 11       	cpse	r24, r1
 3a2:	04 c0       	rjmp	.+8      	; 0x3ac <change_start+0x18>
			started = 1;
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	80 93 1e 01 	sts	0x011E, r24
 3aa:	0b c0       	rjmp	.+22     	; 0x3c2 <change_start+0x2e>
			}else{
			started = 2;
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	80 93 1e 01 	sts	0x011E, r24
			time_count = 0;
 3b2:	10 92 13 01 	sts	0x0113, r1
 3b6:	10 92 14 01 	sts	0x0114, r1
 3ba:	10 92 15 01 	sts	0x0115, r1
 3be:	10 92 16 01 	sts	0x0116, r1
		}
		se(1);
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	7c de       	rcall	.-776    	; 0xbe <se>
		PORTD = PORTD | 0b00001000;//ON
 3c6:	5b 9a       	sbi	0x0b, 3	; 11
 3c8:	08 c0       	rjmp	.+16     	; 0x3da <change_start+0x46>

		}else{
		started = 0;
 3ca:	10 92 1e 01 	sts	0x011E, r1
		se(2);
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	76 de       	rcall	.-788    	; 0xbe <se>
		is_keep_mood = 0;
 3d2:	10 92 1d 01 	sts	0x011D, r1
		PORTC = PORTC & 0b11111011;//保温モードLED OFF
 3d6:	42 98       	cbi	0x08, 2	; 8
		PORTD = PORTD & 0b11110111;//スタートLED OFF
 3d8:	5b 98       	cbi	0x0b, 3	; 11
	}

	//ヒーターのON・OFF制御
	heater_control();
 3da:	9e df       	rcall	.-196    	; 0x318 <heater_control>
 3dc:	2f e5       	ldi	r18, 0x5F	; 95
 3de:	8a ee       	ldi	r24, 0xEA	; 234
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	21 50       	subi	r18, 0x01	; 1
 3e4:	80 40       	sbci	r24, 0x00	; 0
 3e6:	90 40       	sbci	r25, 0x00	; 0
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <change_start+0x4e>
 3ea:	00 c0       	rjmp	.+0      	; 0x3ec <change_start+0x58>
 3ec:	00 00       	nop
 3ee:	08 95       	ret

000003f0 <change_mode>:
//モードを切り替える関数
void change_mode (void) {
	
	//モードを切り替える（1→2→3トグル）
	//モード表示用LEDも同時に切り替える。
	switch( mode ) {
 3f0:	80 91 0e 01 	lds	r24, 0x010E
 3f4:	82 30       	cpi	r24, 0x02	; 2
 3f6:	61 f0       	breq	.+24     	; 0x410 <change_mode+0x20>
 3f8:	83 30       	cpi	r24, 0x03	; 3
 3fa:	89 f0       	breq	.+34     	; 0x41e <change_mode+0x2e>
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	b1 f4       	brne	.+44     	; 0x42c <change_mode+0x3c>
		
		case MODE_TARGET:
		mode = MODE_MONITOR;
 400:	82 e0       	ldi	r24, 0x02	; 2
 402:	80 93 0e 01 	sts	0x010E, r24
		PORTD = PORTD & 0b10011111;
 406:	8b b1       	in	r24, 0x0b	; 11
 408:	8f 79       	andi	r24, 0x9F	; 159
 40a:	8b b9       	out	0x0b, r24	; 11
		PORTD = PORTD | 0b01000000;
 40c:	5e 9a       	sbi	0x0b, 6	; 11
		break;
 40e:	0e c0       	rjmp	.+28     	; 0x42c <change_mode+0x3c>

		case MODE_MONITOR:
		mode = MODE_TIMER;
 410:	83 e0       	ldi	r24, 0x03	; 3
 412:	80 93 0e 01 	sts	0x010E, r24
		//タイマーモードは7セグLEDの「.」表示LEDにつかわれるIOピンで
		//モード表示用LEDも点灯させるため、ここでは点灯設定不要
		PORTD = PORTD & 0b10011111;
 416:	8b b1       	in	r24, 0x0b	; 11
 418:	8f 79       	andi	r24, 0x9F	; 159
 41a:	8b b9       	out	0x0b, r24	; 11
		break;
 41c:	07 c0       	rjmp	.+14     	; 0x42c <change_mode+0x3c>
		
		case MODE_TIMER:
		mode = MODE_TARGET;
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	80 93 0e 01 	sts	0x010E, r24
		PORTD = PORTD & 0b10011111;
 424:	8b b1       	in	r24, 0x0b	; 11
 426:	8f 79       	andi	r24, 0x9F	; 159
 428:	8b b9       	out	0x0b, r24	; 11
		PORTD = PORTD | 0b00100000;
 42a:	5d 9a       	sbi	0x0b, 5	; 11
		break;
		
	}

	//7セグLEDを表示
	display();
 42c:	5d de       	rcall	.-838    	; 0xe8 <display>
 42e:	2f e5       	ldi	r18, 0x5F	; 95
 430:	8a ee       	ldi	r24, 0xEA	; 234
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	21 50       	subi	r18, 0x01	; 1
 436:	80 40       	sbci	r24, 0x00	; 0
 438:	90 40       	sbci	r25, 0x00	; 0
 43a:	e1 f7       	brne	.-8      	; 0x434 <change_mode+0x44>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <change_mode+0x4e>
 43e:	00 00       	nop
 440:	08 95       	ret

00000442 <count_up>:
}

//設定値をカウントアップする関数
void count_up (void) {
	
	switch( mode ) {
 442:	80 91 0e 01 	lds	r24, 0x010E
 446:	81 30       	cpi	r24, 0x01	; 1
 448:	19 f0       	breq	.+6      	; 0x450 <count_up+0xe>
 44a:	83 30       	cpi	r24, 0x03	; 3
 44c:	a9 f4       	brne	.+42     	; 0x478 <count_up+0x36>
 44e:	0d c0       	rjmp	.+26     	; 0x46a <count_up+0x28>
		
		//設定温度モードなら
		case MODE_TARGET:
		if( target < TARGET_MAX ) {
 450:	60 91 20 01 	lds	r22, 0x0120
 454:	62 33       	cpi	r22, 0x32	; 50
 456:	80 f4       	brcc	.+32     	; 0x478 <count_up+0x36>
			target++;
 458:	6f 5f       	subi	r22, 0xFF	; 255
 45a:	60 93 20 01 	sts	0x0120, r22

			//EEPROMにデータ保存
			eeprom_busy_wait();/* 読み書き可能になるまで待つ */
 45e:	f9 99       	sbic	0x1f, 1	; 31
 460:	fe cf       	rjmp	.-4      	; 0x45e <count_up+0x1c>
			eeprom_write_byte(0x00, target);/* 値0xAAをEEPROMの0番地に書き込む */
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	3d d3       	rcall	.+1658   	; 0xae2 <__eewr_byte_m88>
 468:	07 c0       	rjmp	.+14     	; 0x478 <count_up+0x36>
		
		break;

		//タイマーモードなら
		case MODE_TIMER:
		if( timer < TIMER_MAX ) {
 46a:	80 91 17 01 	lds	r24, 0x0117
 46e:	8f 35       	cpi	r24, 0x5F	; 95
 470:	18 f4       	brcc	.+6      	; 0x478 <count_up+0x36>
			timer += 5;
 472:	8b 5f       	subi	r24, 0xFB	; 251
 474:	80 93 17 01 	sts	0x0117, r24
		break;
		
	}

	//7セグLEDを表示
	display();
 478:	37 de       	rcall	.-914    	; 0xe8 <display>
 47a:	2f e5       	ldi	r18, 0x5F	; 95
 47c:	8a ee       	ldi	r24, 0xEA	; 234
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	21 50       	subi	r18, 0x01	; 1
 482:	80 40       	sbci	r24, 0x00	; 0
 484:	90 40       	sbci	r25, 0x00	; 0
 486:	e1 f7       	brne	.-8      	; 0x480 <count_up+0x3e>
 488:	00 c0       	rjmp	.+0      	; 0x48a <count_up+0x48>
 48a:	00 00       	nop
 48c:	08 95       	ret

0000048e <count_down>:
}

//設定値をカウントダウンする関数
void count_down (void) {
	
	switch( mode ) {
 48e:	80 91 0e 01 	lds	r24, 0x010E
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	19 f0       	breq	.+6      	; 0x49c <count_down+0xe>
 496:	83 30       	cpi	r24, 0x03	; 3
 498:	a9 f4       	brne	.+42     	; 0x4c4 <count_down+0x36>
 49a:	0d c0       	rjmp	.+26     	; 0x4b6 <count_down+0x28>
		
		//設定温度モードなら
		case MODE_TARGET:
		if( target > TARGET_MIN ) {
 49c:	60 91 20 01 	lds	r22, 0x0120
 4a0:	66 23       	and	r22, r22
 4a2:	81 f0       	breq	.+32     	; 0x4c4 <count_down+0x36>
			target--;
 4a4:	61 50       	subi	r22, 0x01	; 1
 4a6:	60 93 20 01 	sts	0x0120, r22
			
			//EEPROMにデータ保存
			eeprom_busy_wait();/* 読み書き可能になるまで待つ */
 4aa:	f9 99       	sbic	0x1f, 1	; 31
 4ac:	fe cf       	rjmp	.-4      	; 0x4aa <count_down+0x1c>
			eeprom_write_byte(0x00, target);/* 値0xAAをEEPROMの0番地に書き込む */
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	17 d3       	rcall	.+1582   	; 0xae2 <__eewr_byte_m88>
 4b4:	07 c0       	rjmp	.+14     	; 0x4c4 <count_down+0x36>
		
		break;

		//タイマーモードなら
		case MODE_TIMER:
		if( timer > TIMER_MIN ) {
 4b6:	80 91 17 01 	lds	r24, 0x0117
 4ba:	88 23       	and	r24, r24
 4bc:	19 f0       	breq	.+6      	; 0x4c4 <count_down+0x36>
			timer -= 5;
 4be:	85 50       	subi	r24, 0x05	; 5
 4c0:	80 93 17 01 	sts	0x0117, r24
		break;
		
	}

	//7セグLEDを表示
	display();
 4c4:	11 de       	rcall	.-990    	; 0xe8 <display>
 4c6:	2f e5       	ldi	r18, 0x5F	; 95
 4c8:	8a ee       	ldi	r24, 0xEA	; 234
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	21 50       	subi	r18, 0x01	; 1
 4ce:	80 40       	sbci	r24, 0x00	; 0
 4d0:	90 40       	sbci	r25, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <count_down+0x3e>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <count_down+0x48>
 4d6:	00 00       	nop
 4d8:	08 95       	ret

000004da <button_sensor>:

//ボタンが押されたかを検知する関数
void button_sensor (void) {

	//STARTボタンが押されたら
	if( bit_is_clear(PIND, PD2) ) {
 4da:	4a 9b       	sbis	0x09, 2	; 9
		change_start();
 4dc:	5b df       	rcall	.-330    	; 0x394 <change_start>
	}

	//モード切り替えボタンが押されたら
	if( bit_is_clear(PINC, PC3) ) {
 4de:	33 9b       	sbis	0x06, 3	; 6
		change_mode();
 4e0:	87 df       	rcall	.-242    	; 0x3f0 <change_mode>
	}

	//UPボタンが押されたら
	if( bit_is_clear(PINC, PC4) ) {
 4e2:	34 9b       	sbis	0x06, 4	; 6
		count_up();
 4e4:	ae df       	rcall	.-164    	; 0x442 <count_up>
	}

	//DOWNボタンが押されたら
	if( bit_is_clear(PINC, PC5) ) {
 4e6:	35 9b       	sbis	0x06, 5	; 6
		count_down();
 4e8:	d2 df       	rcall	.-92     	; 0x48e <count_down>
 4ea:	08 95       	ret

000004ec <get_temp>:
	}
}

//AD変換を利用し温度を測定し、測定した温度(℃)をfloat型の数値で返す関数
float get_temp (void) {
 4ec:	cf 92       	push	r12
 4ee:	df 92       	push	r13
 4f0:	ef 92       	push	r14
 4f2:	ff 92       	push	r15
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29

	int x,y;

	//温度測定(初回1回)
	ADMUX  = 0b00001110;
 4f8:	8e e0       	ldi	r24, 0x0E	; 14
 4fa:	80 93 7c 00 	sts	0x007C, r24
 4fe:	81 ee       	ldi	r24, 0xE1	; 225
 500:	94 e0       	ldi	r25, 0x04	; 4
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <__stack+0x3>
 506:	00 c0       	rjmp	.+0      	; 0x508 <__stack+0x9>
 508:	00 00       	nop
	_delay_ms(5);

	//AD変換開始
	ADCSRA = ADCSRA | 0b01000000;
 50a:	ea e7       	ldi	r30, 0x7A	; 122
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	80 64       	ori	r24, 0x40	; 64
 512:	80 83       	st	Z, r24
	//変換中はループ
	while(ADCSRA & 0b01000000);
 514:	80 81       	ld	r24, Z
 516:	86 fd       	sbrc	r24, 6
 518:	fd cf       	rjmp	.-6      	; 0x514 <__stack+0x15>

	y = ADC;
 51a:	c0 91 78 00 	lds	r28, 0x0078
 51e:	d0 91 79 00 	lds	r29, 0x0079

	ADMUX  = 0b00000000;
 522:	10 92 7c 00 	sts	0x007C, r1
 526:	81 ee       	ldi	r24, 0xE1	; 225
 528:	94 e0       	ldi	r25, 0x04	; 4
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <__stack+0x2b>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <__stack+0x31>
 530:	00 00       	nop
	_delay_ms(5);

	//AD変換開始
	ADCSRA = ADCSRA | 0b01000000;
 532:	ea e7       	ldi	r30, 0x7A	; 122
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	80 64       	ori	r24, 0x40	; 64
 53a:	80 83       	st	Z, r24
	//変換中はループ
	while(ADCSRA & 0b01000000);
 53c:	80 81       	ld	r24, Z
 53e:	86 fd       	sbrc	r24, 6
 540:	fd cf       	rjmp	.-6      	; 0x53c <__stack+0x3d>

	x = ADC;
 542:	60 91 78 00 	lds	r22, 0x0078
 546:	70 91 79 00 	lds	r23, 0x0079

	return 100 * ( (float)x / (float)y * 1.1 );
 54a:	88 27       	eor	r24, r24
 54c:	77 fd       	sbrc	r23, 7
 54e:	80 95       	com	r24
 550:	98 2f       	mov	r25, r24
 552:	9c d1       	rcall	.+824    	; 0x88c <__floatsisf>
 554:	6b 01       	movw	r12, r22
 556:	7c 01       	movw	r14, r24
 558:	be 01       	movw	r22, r28
 55a:	88 27       	eor	r24, r24
 55c:	77 fd       	sbrc	r23, 7
 55e:	80 95       	com	r24
 560:	98 2f       	mov	r25, r24
 562:	94 d1       	rcall	.+808    	; 0x88c <__floatsisf>
 564:	9b 01       	movw	r18, r22
 566:	ac 01       	movw	r20, r24
 568:	c7 01       	movw	r24, r14
 56a:	b6 01       	movw	r22, r12
 56c:	f9 d0       	rcall	.+498    	; 0x760 <__divsf3>
 56e:	2d ec       	ldi	r18, 0xCD	; 205
 570:	3c ec       	ldi	r19, 0xCC	; 204
 572:	4c e8       	ldi	r20, 0x8C	; 140
 574:	5f e3       	ldi	r21, 0x3F	; 63
 576:	1a d2       	rcall	.+1076   	; 0x9ac <__mulsf3>
 578:	20 e0       	ldi	r18, 0x00	; 0
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	48 ec       	ldi	r20, 0xC8	; 200
 57e:	52 e4       	ldi	r21, 0x42	; 66
 580:	15 d2       	rcall	.+1066   	; 0x9ac <__mulsf3>

}
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	ff 90       	pop	r15
 588:	ef 90       	pop	r14
 58a:	df 90       	pop	r13
 58c:	cf 90       	pop	r12
 58e:	08 95       	ret

00000590 <main>:

int main(void) {

	//入出力モード設定
	DDRB  = 0b11111111; //ポートB
 590:	8f ef       	ldi	r24, 0xFF	; 255
 592:	84 b9       	out	0x04, r24	; 4
	DDRC  = 0b11000110; //ポートC
 594:	86 ec       	ldi	r24, 0xC6	; 198
 596:	87 b9       	out	0x07, r24	; 7
	DDRD  = 0b11111011; //ポートD
 598:	8b ef       	ldi	r24, 0xFB	; 251
 59a:	8a b9       	out	0x0a, r24	; 10
	
	//出力の初期化
	PORTB = 0b00000000; //PBは0番だけを1にすることで内部のプルアップ抵抗を有効にする
 59c:	15 b8       	out	0x05, r1	; 5
	PORTC = 0b00111000; //PCすべてLow
 59e:	88 e3       	ldi	r24, 0x38	; 56
 5a0:	88 b9       	out	0x08, r24	; 8
	PORTD = 0b00100100; //PDすべてLow
 5a2:	84 e2       	ldi	r24, 0x24	; 36
 5a4:	8b b9       	out	0x0b, r24	; 11
	
	//タイマー0(7セグダイナミック点灯用タイマー)
	TCCR0A = 0b00000010;//CTCモード
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000101;//約1kHz
 5aa:	95 e0       	ldi	r25, 0x05	; 5
 5ac:	95 bd       	out	0x25, r25	; 37
	OCR0A  = 4;			//5msで割り込み
 5ae:	94 e0       	ldi	r25, 0x04	; 4
 5b0:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0b00000010;//COMPA割り込み
 5b2:	80 93 6e 00 	sts	0x006E, r24

	//AD変換の設定
	ADCSRA = 0b10000100; //62.5kHz
 5b6:	84 e8       	ldi	r24, 0x84	; 132
 5b8:	80 93 7a 00 	sts	0x007A, r24
	ADMUX  = 0b00000000; //ADC0 AREF 右
 5bc:	10 92 7c 00 	sts	0x007C, r1
 5c0:	81 ee       	ldi	r24, 0xE1	; 225
 5c2:	94 e0       	ldi	r25, 0x04	; 4
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <main+0x34>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <main+0x3a>
 5ca:	00 00       	nop

	_delay_ms(5);
	
	sei();//全体の割り込み許可
 5cc:	78 94       	sei

	//EEPROMから設定温度を読み込み
	eeprom_busy_wait();                /* 読み書き可能になるまで待つ */
 5ce:	f9 99       	sbic	0x1f, 1	; 31
 5d0:	fe cf       	rjmp	.-4      	; 0x5ce <main+0x3e>
	target = eeprom_read_byte(0x00); //EEPROMから(0x00)番地を読み込み
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	7d d2       	rcall	.+1274   	; 0xad2 <__eerd_byte_m88>
 5d8:	80 93 20 01 	sts	0x0120, r24
	//設定温度が最大・最小値の外だったら40℃に設定。
	//どうも初回起動時はこの番地(0x00)のメモリの値は大概255になる模様。なのでこれは初回起動時用の設定。
	if( (target < TARGET_MIN) || (target > TARGET_MAX) ) {
 5dc:	83 33       	cpi	r24, 0x33	; 51
 5de:	18 f0       	brcs	.+6      	; 0x5e6 <main+0x56>
		target = TARGET_DEFAULT;
 5e0:	88 e2       	ldi	r24, 0x28	; 40
 5e2:	80 93 20 01 	sts	0x0120, r24
	}

	//7セグLEDを表示
	display();
 5e6:	80 dd       	rcall	.-1280   	; 0xe8 <display>


	//温度測定(起動時に素早く表示するために1回だけ測定する)
	temp = get_temp();
 5e8:	81 df       	rcall	.-254    	; 0x4ec <get_temp>
 5ea:	60 93 19 01 	sts	0x0119, r22
 5ee:	70 93 1a 01 	sts	0x011A, r23
 5f2:	80 93 1b 01 	sts	0x011B, r24
 5f6:	90 93 1c 01 	sts	0x011C, r25

	while(1) {
		
		z = 0.0;

		for( unsigned char i = 0; i < 100; i++ ){
 5fa:	10 e0       	ldi	r17, 0x00	; 0

	double z;

	while(1) {
		
		z = 0.0;
 5fc:	d1 2c       	mov	r13, r1
 5fe:	e1 2c       	mov	r14, r1
 600:	f1 2c       	mov	r15, r1
 602:	00 e0       	ldi	r16, 0x00	; 0

		for( unsigned char i = 0; i < 100; i++ ){
 604:	c0 e0       	ldi	r28, 0x00	; 0
			
			//アラームを鳴らす
			alarm(3);

			//保温モードにする
			is_keep_mood = 1;
 606:	d1 e0       	ldi	r29, 0x01	; 1
 608:	0e c0       	rjmp	.+28     	; 0x626 <main+0x96>
		z = 0.0;

		for( unsigned char i = 0; i < 100; i++ ){
			
			//ボタンが押されたかを検知する
			button_sensor();
 60a:	67 df       	rcall	.-306    	; 0x4da <button_sensor>
			
			//計測した温度をz変数に繰り返し加算
			z += get_temp();
 60c:	6f df       	rcall	.-290    	; 0x4ec <get_temp>
 60e:	9b 01       	movw	r18, r22
 610:	ac 01       	movw	r20, r24
 612:	6d 2d       	mov	r22, r13
 614:	7e 2d       	mov	r23, r14
 616:	8f 2d       	mov	r24, r15
 618:	90 2f       	mov	r25, r16
 61a:	3e d0       	rcall	.+124    	; 0x698 <__addsf3>
 61c:	d6 2e       	mov	r13, r22
 61e:	e7 2e       	mov	r14, r23
 620:	f8 2e       	mov	r15, r24
 622:	09 2f       	mov	r16, r25

	while(1) {
		
		z = 0.0;

		for( unsigned char i = 0; i < 100; i++ ){
 624:	1f 5f       	subi	r17, 0xFF	; 255
 626:	14 36       	cpi	r17, 0x64	; 100
 628:	80 f3       	brcs	.-32     	; 0x60a <main+0x7a>
			//計測した温度をz変数に繰り返し加算
			z += get_temp();

		}

		temp = z / 100;
 62a:	20 e0       	ldi	r18, 0x00	; 0
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	48 ec       	ldi	r20, 0xC8	; 200
 630:	52 e4       	ldi	r21, 0x42	; 66
 632:	6d 2d       	mov	r22, r13
 634:	7e 2d       	mov	r23, r14
 636:	8f 2d       	mov	r24, r15
 638:	90 2f       	mov	r25, r16
 63a:	92 d0       	rcall	.+292    	; 0x760 <__divsf3>
 63c:	60 93 19 01 	sts	0x0119, r22
 640:	70 93 1a 01 	sts	0x011A, r23
 644:	80 93 1b 01 	sts	0x011B, r24
 648:	90 93 1c 01 	sts	0x011C, r25

		//ヒーターのON・OFF制御
		heater_control();
 64c:	65 de       	rcall	.-822    	; 0x318 <heater_control>
		
		//7セグLEDを表示
		display();
 64e:	4c dd       	rcall	.-1384   	; 0xe8 <display>
		//---------------------------------
		// 設定温度に達したらアラームを鳴らす
		//---------------------------------
		
		//スタートしており、かつ保温モードでなければ
		if( started == 1 && is_over == 1 && (! is_keep_mood) ) {
 650:	80 91 1e 01 	lds	r24, 0x011E
 654:	81 30       	cpi	r24, 0x01	; 1
 656:	69 f4       	brne	.+26     	; 0x672 <main+0xe2>
 658:	80 91 18 01 	lds	r24, 0x0118
 65c:	81 30       	cpi	r24, 0x01	; 1
 65e:	49 f4       	brne	.+18     	; 0x672 <main+0xe2>
 660:	80 91 1d 01 	lds	r24, 0x011D
 664:	81 11       	cpse	r24, r1
 666:	09 c0       	rjmp	.+18     	; 0x67a <main+0xea>
			
			//アラームを鳴らす
			alarm(3);
 668:	83 e0       	ldi	r24, 0x03	; 3
 66a:	00 dd       	rcall	.-1536   	; 0x6c <alarm>

			//保温モードにする
			is_keep_mood = 1;
 66c:	d0 93 1d 01 	sts	0x011D, r29
 670:	04 c0       	rjmp	.+8      	; 0x67a <main+0xea>
		}

		//---------------------------------
		// 保温モードなら保温LED点灯
		//---------------------------------
		if( is_keep_mood ) {
 672:	80 91 1d 01 	lds	r24, 0x011D
 676:	88 23       	and	r24, r24
 678:	39 f0       	breq	.+14     	; 0x688 <main+0xf8>
			PORTC = PORTC | 0b00000100;
 67a:	42 9a       	sbi	0x08, 2	; 8

	while(1) {
		
		z = 0.0;

		for( unsigned char i = 0; i < 100; i++ ){
 67c:	1c 2f       	mov	r17, r28

	double z;

	while(1) {
		
		z = 0.0;
 67e:	dc 2e       	mov	r13, r28
 680:	ec 2e       	mov	r14, r28
 682:	fc 2e       	mov	r15, r28
 684:	0c 2f       	mov	r16, r28
 686:	cf cf       	rjmp	.-98     	; 0x626 <main+0x96>
		// 保温モードなら保温LED点灯
		//---------------------------------
		if( is_keep_mood ) {
			PORTC = PORTC | 0b00000100;
			}else{
			PORTC = PORTC & 0b11111011;
 688:	42 98       	cbi	0x08, 2	; 8

	while(1) {
		
		z = 0.0;

		for( unsigned char i = 0; i < 100; i++ ){
 68a:	1c 2f       	mov	r17, r28

	double z;

	while(1) {
		
		z = 0.0;
 68c:	dc 2e       	mov	r13, r28
 68e:	ec 2e       	mov	r14, r28
 690:	fc 2e       	mov	r15, r28
 692:	0c 2f       	mov	r16, r28
 694:	c8 cf       	rjmp	.-112    	; 0x626 <main+0x96>

00000696 <__subsf3>:
 696:	50 58       	subi	r21, 0x80	; 128

00000698 <__addsf3>:
 698:	bb 27       	eor	r27, r27
 69a:	aa 27       	eor	r26, r26
 69c:	0e d0       	rcall	.+28     	; 0x6ba <__addsf3x>
 69e:	48 c1       	rjmp	.+656    	; 0x930 <__fp_round>
 6a0:	39 d1       	rcall	.+626    	; 0x914 <__fp_pscA>
 6a2:	30 f0       	brcs	.+12     	; 0x6b0 <__addsf3+0x18>
 6a4:	3e d1       	rcall	.+636    	; 0x922 <__fp_pscB>
 6a6:	20 f0       	brcs	.+8      	; 0x6b0 <__addsf3+0x18>
 6a8:	31 f4       	brne	.+12     	; 0x6b6 <__addsf3+0x1e>
 6aa:	9f 3f       	cpi	r25, 0xFF	; 255
 6ac:	11 f4       	brne	.+4      	; 0x6b2 <__addsf3+0x1a>
 6ae:	1e f4       	brtc	.+6      	; 0x6b6 <__addsf3+0x1e>
 6b0:	2e c1       	rjmp	.+604    	; 0x90e <__fp_nan>
 6b2:	0e f4       	brtc	.+2      	; 0x6b6 <__addsf3+0x1e>
 6b4:	e0 95       	com	r30
 6b6:	e7 fb       	bst	r30, 7
 6b8:	24 c1       	rjmp	.+584    	; 0x902 <__fp_inf>

000006ba <__addsf3x>:
 6ba:	e9 2f       	mov	r30, r25
 6bc:	4a d1       	rcall	.+660    	; 0x952 <__fp_split3>
 6be:	80 f3       	brcs	.-32     	; 0x6a0 <__addsf3+0x8>
 6c0:	ba 17       	cp	r27, r26
 6c2:	62 07       	cpc	r22, r18
 6c4:	73 07       	cpc	r23, r19
 6c6:	84 07       	cpc	r24, r20
 6c8:	95 07       	cpc	r25, r21
 6ca:	18 f0       	brcs	.+6      	; 0x6d2 <__addsf3x+0x18>
 6cc:	71 f4       	brne	.+28     	; 0x6ea <__addsf3x+0x30>
 6ce:	9e f5       	brtc	.+102    	; 0x736 <__addsf3x+0x7c>
 6d0:	62 c1       	rjmp	.+708    	; 0x996 <__fp_zero>
 6d2:	0e f4       	brtc	.+2      	; 0x6d6 <__addsf3x+0x1c>
 6d4:	e0 95       	com	r30
 6d6:	0b 2e       	mov	r0, r27
 6d8:	ba 2f       	mov	r27, r26
 6da:	a0 2d       	mov	r26, r0
 6dc:	0b 01       	movw	r0, r22
 6de:	b9 01       	movw	r22, r18
 6e0:	90 01       	movw	r18, r0
 6e2:	0c 01       	movw	r0, r24
 6e4:	ca 01       	movw	r24, r20
 6e6:	a0 01       	movw	r20, r0
 6e8:	11 24       	eor	r1, r1
 6ea:	ff 27       	eor	r31, r31
 6ec:	59 1b       	sub	r21, r25
 6ee:	99 f0       	breq	.+38     	; 0x716 <__addsf3x+0x5c>
 6f0:	59 3f       	cpi	r21, 0xF9	; 249
 6f2:	50 f4       	brcc	.+20     	; 0x708 <__addsf3x+0x4e>
 6f4:	50 3e       	cpi	r21, 0xE0	; 224
 6f6:	68 f1       	brcs	.+90     	; 0x752 <__addsf3x+0x98>
 6f8:	1a 16       	cp	r1, r26
 6fa:	f0 40       	sbci	r31, 0x00	; 0
 6fc:	a2 2f       	mov	r26, r18
 6fe:	23 2f       	mov	r18, r19
 700:	34 2f       	mov	r19, r20
 702:	44 27       	eor	r20, r20
 704:	58 5f       	subi	r21, 0xF8	; 248
 706:	f3 cf       	rjmp	.-26     	; 0x6ee <__addsf3x+0x34>
 708:	46 95       	lsr	r20
 70a:	37 95       	ror	r19
 70c:	27 95       	ror	r18
 70e:	a7 95       	ror	r26
 710:	f0 40       	sbci	r31, 0x00	; 0
 712:	53 95       	inc	r21
 714:	c9 f7       	brne	.-14     	; 0x708 <__addsf3x+0x4e>
 716:	7e f4       	brtc	.+30     	; 0x736 <__addsf3x+0x7c>
 718:	1f 16       	cp	r1, r31
 71a:	ba 0b       	sbc	r27, r26
 71c:	62 0b       	sbc	r22, r18
 71e:	73 0b       	sbc	r23, r19
 720:	84 0b       	sbc	r24, r20
 722:	ba f0       	brmi	.+46     	; 0x752 <__addsf3x+0x98>
 724:	91 50       	subi	r25, 0x01	; 1
 726:	a1 f0       	breq	.+40     	; 0x750 <__addsf3x+0x96>
 728:	ff 0f       	add	r31, r31
 72a:	bb 1f       	adc	r27, r27
 72c:	66 1f       	adc	r22, r22
 72e:	77 1f       	adc	r23, r23
 730:	88 1f       	adc	r24, r24
 732:	c2 f7       	brpl	.-16     	; 0x724 <__addsf3x+0x6a>
 734:	0e c0       	rjmp	.+28     	; 0x752 <__addsf3x+0x98>
 736:	ba 0f       	add	r27, r26
 738:	62 1f       	adc	r22, r18
 73a:	73 1f       	adc	r23, r19
 73c:	84 1f       	adc	r24, r20
 73e:	48 f4       	brcc	.+18     	; 0x752 <__addsf3x+0x98>
 740:	87 95       	ror	r24
 742:	77 95       	ror	r23
 744:	67 95       	ror	r22
 746:	b7 95       	ror	r27
 748:	f7 95       	ror	r31
 74a:	9e 3f       	cpi	r25, 0xFE	; 254
 74c:	08 f0       	brcs	.+2      	; 0x750 <__addsf3x+0x96>
 74e:	b3 cf       	rjmp	.-154    	; 0x6b6 <__addsf3+0x1e>
 750:	93 95       	inc	r25
 752:	88 0f       	add	r24, r24
 754:	08 f0       	brcs	.+2      	; 0x758 <__addsf3x+0x9e>
 756:	99 27       	eor	r25, r25
 758:	ee 0f       	add	r30, r30
 75a:	97 95       	ror	r25
 75c:	87 95       	ror	r24
 75e:	08 95       	ret

00000760 <__divsf3>:
 760:	0c d0       	rcall	.+24     	; 0x77a <__divsf3x>
 762:	e6 c0       	rjmp	.+460    	; 0x930 <__fp_round>
 764:	de d0       	rcall	.+444    	; 0x922 <__fp_pscB>
 766:	40 f0       	brcs	.+16     	; 0x778 <__divsf3+0x18>
 768:	d5 d0       	rcall	.+426    	; 0x914 <__fp_pscA>
 76a:	30 f0       	brcs	.+12     	; 0x778 <__divsf3+0x18>
 76c:	21 f4       	brne	.+8      	; 0x776 <__divsf3+0x16>
 76e:	5f 3f       	cpi	r21, 0xFF	; 255
 770:	19 f0       	breq	.+6      	; 0x778 <__divsf3+0x18>
 772:	c7 c0       	rjmp	.+398    	; 0x902 <__fp_inf>
 774:	51 11       	cpse	r21, r1
 776:	10 c1       	rjmp	.+544    	; 0x998 <__fp_szero>
 778:	ca c0       	rjmp	.+404    	; 0x90e <__fp_nan>

0000077a <__divsf3x>:
 77a:	eb d0       	rcall	.+470    	; 0x952 <__fp_split3>
 77c:	98 f3       	brcs	.-26     	; 0x764 <__divsf3+0x4>

0000077e <__divsf3_pse>:
 77e:	99 23       	and	r25, r25
 780:	c9 f3       	breq	.-14     	; 0x774 <__divsf3+0x14>
 782:	55 23       	and	r21, r21
 784:	b1 f3       	breq	.-20     	; 0x772 <__divsf3+0x12>
 786:	95 1b       	sub	r25, r21
 788:	55 0b       	sbc	r21, r21
 78a:	bb 27       	eor	r27, r27
 78c:	aa 27       	eor	r26, r26
 78e:	62 17       	cp	r22, r18
 790:	73 07       	cpc	r23, r19
 792:	84 07       	cpc	r24, r20
 794:	38 f0       	brcs	.+14     	; 0x7a4 <__divsf3_pse+0x26>
 796:	9f 5f       	subi	r25, 0xFF	; 255
 798:	5f 4f       	sbci	r21, 0xFF	; 255
 79a:	22 0f       	add	r18, r18
 79c:	33 1f       	adc	r19, r19
 79e:	44 1f       	adc	r20, r20
 7a0:	aa 1f       	adc	r26, r26
 7a2:	a9 f3       	breq	.-22     	; 0x78e <__divsf3_pse+0x10>
 7a4:	33 d0       	rcall	.+102    	; 0x80c <__divsf3_pse+0x8e>
 7a6:	0e 2e       	mov	r0, r30
 7a8:	3a f0       	brmi	.+14     	; 0x7b8 <__divsf3_pse+0x3a>
 7aa:	e0 e8       	ldi	r30, 0x80	; 128
 7ac:	30 d0       	rcall	.+96     	; 0x80e <__divsf3_pse+0x90>
 7ae:	91 50       	subi	r25, 0x01	; 1
 7b0:	50 40       	sbci	r21, 0x00	; 0
 7b2:	e6 95       	lsr	r30
 7b4:	00 1c       	adc	r0, r0
 7b6:	ca f7       	brpl	.-14     	; 0x7aa <__divsf3_pse+0x2c>
 7b8:	29 d0       	rcall	.+82     	; 0x80c <__divsf3_pse+0x8e>
 7ba:	fe 2f       	mov	r31, r30
 7bc:	27 d0       	rcall	.+78     	; 0x80c <__divsf3_pse+0x8e>
 7be:	66 0f       	add	r22, r22
 7c0:	77 1f       	adc	r23, r23
 7c2:	88 1f       	adc	r24, r24
 7c4:	bb 1f       	adc	r27, r27
 7c6:	26 17       	cp	r18, r22
 7c8:	37 07       	cpc	r19, r23
 7ca:	48 07       	cpc	r20, r24
 7cc:	ab 07       	cpc	r26, r27
 7ce:	b0 e8       	ldi	r27, 0x80	; 128
 7d0:	09 f0       	breq	.+2      	; 0x7d4 <__divsf3_pse+0x56>
 7d2:	bb 0b       	sbc	r27, r27
 7d4:	80 2d       	mov	r24, r0
 7d6:	bf 01       	movw	r22, r30
 7d8:	ff 27       	eor	r31, r31
 7da:	93 58       	subi	r25, 0x83	; 131
 7dc:	5f 4f       	sbci	r21, 0xFF	; 255
 7de:	2a f0       	brmi	.+10     	; 0x7ea <__divsf3_pse+0x6c>
 7e0:	9e 3f       	cpi	r25, 0xFE	; 254
 7e2:	51 05       	cpc	r21, r1
 7e4:	68 f0       	brcs	.+26     	; 0x800 <__divsf3_pse+0x82>
 7e6:	8d c0       	rjmp	.+282    	; 0x902 <__fp_inf>
 7e8:	d7 c0       	rjmp	.+430    	; 0x998 <__fp_szero>
 7ea:	5f 3f       	cpi	r21, 0xFF	; 255
 7ec:	ec f3       	brlt	.-6      	; 0x7e8 <__divsf3_pse+0x6a>
 7ee:	98 3e       	cpi	r25, 0xE8	; 232
 7f0:	dc f3       	brlt	.-10     	; 0x7e8 <__divsf3_pse+0x6a>
 7f2:	86 95       	lsr	r24
 7f4:	77 95       	ror	r23
 7f6:	67 95       	ror	r22
 7f8:	b7 95       	ror	r27
 7fa:	f7 95       	ror	r31
 7fc:	9f 5f       	subi	r25, 0xFF	; 255
 7fe:	c9 f7       	brne	.-14     	; 0x7f2 <__divsf3_pse+0x74>
 800:	88 0f       	add	r24, r24
 802:	91 1d       	adc	r25, r1
 804:	96 95       	lsr	r25
 806:	87 95       	ror	r24
 808:	97 f9       	bld	r25, 7
 80a:	08 95       	ret
 80c:	e1 e0       	ldi	r30, 0x01	; 1
 80e:	66 0f       	add	r22, r22
 810:	77 1f       	adc	r23, r23
 812:	88 1f       	adc	r24, r24
 814:	bb 1f       	adc	r27, r27
 816:	62 17       	cp	r22, r18
 818:	73 07       	cpc	r23, r19
 81a:	84 07       	cpc	r24, r20
 81c:	ba 07       	cpc	r27, r26
 81e:	20 f0       	brcs	.+8      	; 0x828 <__divsf3_pse+0xaa>
 820:	62 1b       	sub	r22, r18
 822:	73 0b       	sbc	r23, r19
 824:	84 0b       	sbc	r24, r20
 826:	ba 0b       	sbc	r27, r26
 828:	ee 1f       	adc	r30, r30
 82a:	88 f7       	brcc	.-30     	; 0x80e <__divsf3_pse+0x90>
 82c:	e0 95       	com	r30
 82e:	08 95       	ret

00000830 <__fixunssfsi>:
 830:	98 d0       	rcall	.+304    	; 0x962 <__fp_splitA>
 832:	88 f0       	brcs	.+34     	; 0x856 <__fixunssfsi+0x26>
 834:	9f 57       	subi	r25, 0x7F	; 127
 836:	90 f0       	brcs	.+36     	; 0x85c <__fixunssfsi+0x2c>
 838:	b9 2f       	mov	r27, r25
 83a:	99 27       	eor	r25, r25
 83c:	b7 51       	subi	r27, 0x17	; 23
 83e:	a0 f0       	brcs	.+40     	; 0x868 <__fixunssfsi+0x38>
 840:	d1 f0       	breq	.+52     	; 0x876 <__fixunssfsi+0x46>
 842:	66 0f       	add	r22, r22
 844:	77 1f       	adc	r23, r23
 846:	88 1f       	adc	r24, r24
 848:	99 1f       	adc	r25, r25
 84a:	1a f0       	brmi	.+6      	; 0x852 <__fixunssfsi+0x22>
 84c:	ba 95       	dec	r27
 84e:	c9 f7       	brne	.-14     	; 0x842 <__fixunssfsi+0x12>
 850:	12 c0       	rjmp	.+36     	; 0x876 <__fixunssfsi+0x46>
 852:	b1 30       	cpi	r27, 0x01	; 1
 854:	81 f0       	breq	.+32     	; 0x876 <__fixunssfsi+0x46>
 856:	9f d0       	rcall	.+318    	; 0x996 <__fp_zero>
 858:	b1 e0       	ldi	r27, 0x01	; 1
 85a:	08 95       	ret
 85c:	9c c0       	rjmp	.+312    	; 0x996 <__fp_zero>
 85e:	67 2f       	mov	r22, r23
 860:	78 2f       	mov	r23, r24
 862:	88 27       	eor	r24, r24
 864:	b8 5f       	subi	r27, 0xF8	; 248
 866:	39 f0       	breq	.+14     	; 0x876 <__fixunssfsi+0x46>
 868:	b9 3f       	cpi	r27, 0xF9	; 249
 86a:	cc f3       	brlt	.-14     	; 0x85e <__fixunssfsi+0x2e>
 86c:	86 95       	lsr	r24
 86e:	77 95       	ror	r23
 870:	67 95       	ror	r22
 872:	b3 95       	inc	r27
 874:	d9 f7       	brne	.-10     	; 0x86c <__fixunssfsi+0x3c>
 876:	3e f4       	brtc	.+14     	; 0x886 <__fixunssfsi+0x56>
 878:	90 95       	com	r25
 87a:	80 95       	com	r24
 87c:	70 95       	com	r23
 87e:	61 95       	neg	r22
 880:	7f 4f       	sbci	r23, 0xFF	; 255
 882:	8f 4f       	sbci	r24, 0xFF	; 255
 884:	9f 4f       	sbci	r25, 0xFF	; 255
 886:	08 95       	ret

00000888 <__floatunsisf>:
 888:	e8 94       	clt
 88a:	09 c0       	rjmp	.+18     	; 0x89e <__floatsisf+0x12>

0000088c <__floatsisf>:
 88c:	97 fb       	bst	r25, 7
 88e:	3e f4       	brtc	.+14     	; 0x89e <__floatsisf+0x12>
 890:	90 95       	com	r25
 892:	80 95       	com	r24
 894:	70 95       	com	r23
 896:	61 95       	neg	r22
 898:	7f 4f       	sbci	r23, 0xFF	; 255
 89a:	8f 4f       	sbci	r24, 0xFF	; 255
 89c:	9f 4f       	sbci	r25, 0xFF	; 255
 89e:	99 23       	and	r25, r25
 8a0:	a9 f0       	breq	.+42     	; 0x8cc <__floatsisf+0x40>
 8a2:	f9 2f       	mov	r31, r25
 8a4:	96 e9       	ldi	r25, 0x96	; 150
 8a6:	bb 27       	eor	r27, r27
 8a8:	93 95       	inc	r25
 8aa:	f6 95       	lsr	r31
 8ac:	87 95       	ror	r24
 8ae:	77 95       	ror	r23
 8b0:	67 95       	ror	r22
 8b2:	b7 95       	ror	r27
 8b4:	f1 11       	cpse	r31, r1
 8b6:	f8 cf       	rjmp	.-16     	; 0x8a8 <__floatsisf+0x1c>
 8b8:	fa f4       	brpl	.+62     	; 0x8f8 <__floatsisf+0x6c>
 8ba:	bb 0f       	add	r27, r27
 8bc:	11 f4       	brne	.+4      	; 0x8c2 <__floatsisf+0x36>
 8be:	60 ff       	sbrs	r22, 0
 8c0:	1b c0       	rjmp	.+54     	; 0x8f8 <__floatsisf+0x6c>
 8c2:	6f 5f       	subi	r22, 0xFF	; 255
 8c4:	7f 4f       	sbci	r23, 0xFF	; 255
 8c6:	8f 4f       	sbci	r24, 0xFF	; 255
 8c8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ca:	16 c0       	rjmp	.+44     	; 0x8f8 <__floatsisf+0x6c>
 8cc:	88 23       	and	r24, r24
 8ce:	11 f0       	breq	.+4      	; 0x8d4 <__floatsisf+0x48>
 8d0:	96 e9       	ldi	r25, 0x96	; 150
 8d2:	11 c0       	rjmp	.+34     	; 0x8f6 <__floatsisf+0x6a>
 8d4:	77 23       	and	r23, r23
 8d6:	21 f0       	breq	.+8      	; 0x8e0 <__floatsisf+0x54>
 8d8:	9e e8       	ldi	r25, 0x8E	; 142
 8da:	87 2f       	mov	r24, r23
 8dc:	76 2f       	mov	r23, r22
 8de:	05 c0       	rjmp	.+10     	; 0x8ea <__floatsisf+0x5e>
 8e0:	66 23       	and	r22, r22
 8e2:	71 f0       	breq	.+28     	; 0x900 <__floatsisf+0x74>
 8e4:	96 e8       	ldi	r25, 0x86	; 134
 8e6:	86 2f       	mov	r24, r22
 8e8:	70 e0       	ldi	r23, 0x00	; 0
 8ea:	60 e0       	ldi	r22, 0x00	; 0
 8ec:	2a f0       	brmi	.+10     	; 0x8f8 <__floatsisf+0x6c>
 8ee:	9a 95       	dec	r25
 8f0:	66 0f       	add	r22, r22
 8f2:	77 1f       	adc	r23, r23
 8f4:	88 1f       	adc	r24, r24
 8f6:	da f7       	brpl	.-10     	; 0x8ee <__floatsisf+0x62>
 8f8:	88 0f       	add	r24, r24
 8fa:	96 95       	lsr	r25
 8fc:	87 95       	ror	r24
 8fe:	97 f9       	bld	r25, 7
 900:	08 95       	ret

00000902 <__fp_inf>:
 902:	97 f9       	bld	r25, 7
 904:	9f 67       	ori	r25, 0x7F	; 127
 906:	80 e8       	ldi	r24, 0x80	; 128
 908:	70 e0       	ldi	r23, 0x00	; 0
 90a:	60 e0       	ldi	r22, 0x00	; 0
 90c:	08 95       	ret

0000090e <__fp_nan>:
 90e:	9f ef       	ldi	r25, 0xFF	; 255
 910:	80 ec       	ldi	r24, 0xC0	; 192
 912:	08 95       	ret

00000914 <__fp_pscA>:
 914:	00 24       	eor	r0, r0
 916:	0a 94       	dec	r0
 918:	16 16       	cp	r1, r22
 91a:	17 06       	cpc	r1, r23
 91c:	18 06       	cpc	r1, r24
 91e:	09 06       	cpc	r0, r25
 920:	08 95       	ret

00000922 <__fp_pscB>:
 922:	00 24       	eor	r0, r0
 924:	0a 94       	dec	r0
 926:	12 16       	cp	r1, r18
 928:	13 06       	cpc	r1, r19
 92a:	14 06       	cpc	r1, r20
 92c:	05 06       	cpc	r0, r21
 92e:	08 95       	ret

00000930 <__fp_round>:
 930:	09 2e       	mov	r0, r25
 932:	03 94       	inc	r0
 934:	00 0c       	add	r0, r0
 936:	11 f4       	brne	.+4      	; 0x93c <__fp_round+0xc>
 938:	88 23       	and	r24, r24
 93a:	52 f0       	brmi	.+20     	; 0x950 <__fp_round+0x20>
 93c:	bb 0f       	add	r27, r27
 93e:	40 f4       	brcc	.+16     	; 0x950 <__fp_round+0x20>
 940:	bf 2b       	or	r27, r31
 942:	11 f4       	brne	.+4      	; 0x948 <__fp_round+0x18>
 944:	60 ff       	sbrs	r22, 0
 946:	04 c0       	rjmp	.+8      	; 0x950 <__fp_round+0x20>
 948:	6f 5f       	subi	r22, 0xFF	; 255
 94a:	7f 4f       	sbci	r23, 0xFF	; 255
 94c:	8f 4f       	sbci	r24, 0xFF	; 255
 94e:	9f 4f       	sbci	r25, 0xFF	; 255
 950:	08 95       	ret

00000952 <__fp_split3>:
 952:	57 fd       	sbrc	r21, 7
 954:	90 58       	subi	r25, 0x80	; 128
 956:	44 0f       	add	r20, r20
 958:	55 1f       	adc	r21, r21
 95a:	59 f0       	breq	.+22     	; 0x972 <__fp_splitA+0x10>
 95c:	5f 3f       	cpi	r21, 0xFF	; 255
 95e:	71 f0       	breq	.+28     	; 0x97c <__fp_splitA+0x1a>
 960:	47 95       	ror	r20

00000962 <__fp_splitA>:
 962:	88 0f       	add	r24, r24
 964:	97 fb       	bst	r25, 7
 966:	99 1f       	adc	r25, r25
 968:	61 f0       	breq	.+24     	; 0x982 <__fp_splitA+0x20>
 96a:	9f 3f       	cpi	r25, 0xFF	; 255
 96c:	79 f0       	breq	.+30     	; 0x98c <__fp_splitA+0x2a>
 96e:	87 95       	ror	r24
 970:	08 95       	ret
 972:	12 16       	cp	r1, r18
 974:	13 06       	cpc	r1, r19
 976:	14 06       	cpc	r1, r20
 978:	55 1f       	adc	r21, r21
 97a:	f2 cf       	rjmp	.-28     	; 0x960 <__fp_split3+0xe>
 97c:	46 95       	lsr	r20
 97e:	f1 df       	rcall	.-30     	; 0x962 <__fp_splitA>
 980:	08 c0       	rjmp	.+16     	; 0x992 <__fp_splitA+0x30>
 982:	16 16       	cp	r1, r22
 984:	17 06       	cpc	r1, r23
 986:	18 06       	cpc	r1, r24
 988:	99 1f       	adc	r25, r25
 98a:	f1 cf       	rjmp	.-30     	; 0x96e <__fp_splitA+0xc>
 98c:	86 95       	lsr	r24
 98e:	71 05       	cpc	r23, r1
 990:	61 05       	cpc	r22, r1
 992:	08 94       	sec
 994:	08 95       	ret

00000996 <__fp_zero>:
 996:	e8 94       	clt

00000998 <__fp_szero>:
 998:	bb 27       	eor	r27, r27
 99a:	66 27       	eor	r22, r22
 99c:	77 27       	eor	r23, r23
 99e:	cb 01       	movw	r24, r22
 9a0:	97 f9       	bld	r25, 7
 9a2:	08 95       	ret

000009a4 <__gesf2>:
 9a4:	66 d0       	rcall	.+204    	; 0xa72 <__fp_cmp>
 9a6:	08 f4       	brcc	.+2      	; 0x9aa <__gesf2+0x6>
 9a8:	8f ef       	ldi	r24, 0xFF	; 255
 9aa:	08 95       	ret

000009ac <__mulsf3>:
 9ac:	0b d0       	rcall	.+22     	; 0x9c4 <__mulsf3x>
 9ae:	c0 cf       	rjmp	.-128    	; 0x930 <__fp_round>
 9b0:	b1 df       	rcall	.-158    	; 0x914 <__fp_pscA>
 9b2:	28 f0       	brcs	.+10     	; 0x9be <__mulsf3+0x12>
 9b4:	b6 df       	rcall	.-148    	; 0x922 <__fp_pscB>
 9b6:	18 f0       	brcs	.+6      	; 0x9be <__mulsf3+0x12>
 9b8:	95 23       	and	r25, r21
 9ba:	09 f0       	breq	.+2      	; 0x9be <__mulsf3+0x12>
 9bc:	a2 cf       	rjmp	.-188    	; 0x902 <__fp_inf>
 9be:	a7 cf       	rjmp	.-178    	; 0x90e <__fp_nan>
 9c0:	11 24       	eor	r1, r1
 9c2:	ea cf       	rjmp	.-44     	; 0x998 <__fp_szero>

000009c4 <__mulsf3x>:
 9c4:	c6 df       	rcall	.-116    	; 0x952 <__fp_split3>
 9c6:	a0 f3       	brcs	.-24     	; 0x9b0 <__mulsf3+0x4>

000009c8 <__mulsf3_pse>:
 9c8:	95 9f       	mul	r25, r21
 9ca:	d1 f3       	breq	.-12     	; 0x9c0 <__mulsf3+0x14>
 9cc:	95 0f       	add	r25, r21
 9ce:	50 e0       	ldi	r21, 0x00	; 0
 9d0:	55 1f       	adc	r21, r21
 9d2:	62 9f       	mul	r22, r18
 9d4:	f0 01       	movw	r30, r0
 9d6:	72 9f       	mul	r23, r18
 9d8:	bb 27       	eor	r27, r27
 9da:	f0 0d       	add	r31, r0
 9dc:	b1 1d       	adc	r27, r1
 9de:	63 9f       	mul	r22, r19
 9e0:	aa 27       	eor	r26, r26
 9e2:	f0 0d       	add	r31, r0
 9e4:	b1 1d       	adc	r27, r1
 9e6:	aa 1f       	adc	r26, r26
 9e8:	64 9f       	mul	r22, r20
 9ea:	66 27       	eor	r22, r22
 9ec:	b0 0d       	add	r27, r0
 9ee:	a1 1d       	adc	r26, r1
 9f0:	66 1f       	adc	r22, r22
 9f2:	82 9f       	mul	r24, r18
 9f4:	22 27       	eor	r18, r18
 9f6:	b0 0d       	add	r27, r0
 9f8:	a1 1d       	adc	r26, r1
 9fa:	62 1f       	adc	r22, r18
 9fc:	73 9f       	mul	r23, r19
 9fe:	b0 0d       	add	r27, r0
 a00:	a1 1d       	adc	r26, r1
 a02:	62 1f       	adc	r22, r18
 a04:	83 9f       	mul	r24, r19
 a06:	a0 0d       	add	r26, r0
 a08:	61 1d       	adc	r22, r1
 a0a:	22 1f       	adc	r18, r18
 a0c:	74 9f       	mul	r23, r20
 a0e:	33 27       	eor	r19, r19
 a10:	a0 0d       	add	r26, r0
 a12:	61 1d       	adc	r22, r1
 a14:	23 1f       	adc	r18, r19
 a16:	84 9f       	mul	r24, r20
 a18:	60 0d       	add	r22, r0
 a1a:	21 1d       	adc	r18, r1
 a1c:	82 2f       	mov	r24, r18
 a1e:	76 2f       	mov	r23, r22
 a20:	6a 2f       	mov	r22, r26
 a22:	11 24       	eor	r1, r1
 a24:	9f 57       	subi	r25, 0x7F	; 127
 a26:	50 40       	sbci	r21, 0x00	; 0
 a28:	8a f0       	brmi	.+34     	; 0xa4c <__mulsf3_pse+0x84>
 a2a:	e1 f0       	breq	.+56     	; 0xa64 <__mulsf3_pse+0x9c>
 a2c:	88 23       	and	r24, r24
 a2e:	4a f0       	brmi	.+18     	; 0xa42 <__mulsf3_pse+0x7a>
 a30:	ee 0f       	add	r30, r30
 a32:	ff 1f       	adc	r31, r31
 a34:	bb 1f       	adc	r27, r27
 a36:	66 1f       	adc	r22, r22
 a38:	77 1f       	adc	r23, r23
 a3a:	88 1f       	adc	r24, r24
 a3c:	91 50       	subi	r25, 0x01	; 1
 a3e:	50 40       	sbci	r21, 0x00	; 0
 a40:	a9 f7       	brne	.-22     	; 0xa2c <__mulsf3_pse+0x64>
 a42:	9e 3f       	cpi	r25, 0xFE	; 254
 a44:	51 05       	cpc	r21, r1
 a46:	70 f0       	brcs	.+28     	; 0xa64 <__mulsf3_pse+0x9c>
 a48:	5c cf       	rjmp	.-328    	; 0x902 <__fp_inf>
 a4a:	a6 cf       	rjmp	.-180    	; 0x998 <__fp_szero>
 a4c:	5f 3f       	cpi	r21, 0xFF	; 255
 a4e:	ec f3       	brlt	.-6      	; 0xa4a <__mulsf3_pse+0x82>
 a50:	98 3e       	cpi	r25, 0xE8	; 232
 a52:	dc f3       	brlt	.-10     	; 0xa4a <__mulsf3_pse+0x82>
 a54:	86 95       	lsr	r24
 a56:	77 95       	ror	r23
 a58:	67 95       	ror	r22
 a5a:	b7 95       	ror	r27
 a5c:	f7 95       	ror	r31
 a5e:	e7 95       	ror	r30
 a60:	9f 5f       	subi	r25, 0xFF	; 255
 a62:	c1 f7       	brne	.-16     	; 0xa54 <__mulsf3_pse+0x8c>
 a64:	fe 2b       	or	r31, r30
 a66:	88 0f       	add	r24, r24
 a68:	91 1d       	adc	r25, r1
 a6a:	96 95       	lsr	r25
 a6c:	87 95       	ror	r24
 a6e:	97 f9       	bld	r25, 7
 a70:	08 95       	ret

00000a72 <__fp_cmp>:
 a72:	99 0f       	add	r25, r25
 a74:	00 08       	sbc	r0, r0
 a76:	55 0f       	add	r21, r21
 a78:	aa 0b       	sbc	r26, r26
 a7a:	e0 e8       	ldi	r30, 0x80	; 128
 a7c:	fe ef       	ldi	r31, 0xFE	; 254
 a7e:	16 16       	cp	r1, r22
 a80:	17 06       	cpc	r1, r23
 a82:	e8 07       	cpc	r30, r24
 a84:	f9 07       	cpc	r31, r25
 a86:	c0 f0       	brcs	.+48     	; 0xab8 <__fp_cmp+0x46>
 a88:	12 16       	cp	r1, r18
 a8a:	13 06       	cpc	r1, r19
 a8c:	e4 07       	cpc	r30, r20
 a8e:	f5 07       	cpc	r31, r21
 a90:	98 f0       	brcs	.+38     	; 0xab8 <__fp_cmp+0x46>
 a92:	62 1b       	sub	r22, r18
 a94:	73 0b       	sbc	r23, r19
 a96:	84 0b       	sbc	r24, r20
 a98:	95 0b       	sbc	r25, r21
 a9a:	39 f4       	brne	.+14     	; 0xaaa <__fp_cmp+0x38>
 a9c:	0a 26       	eor	r0, r26
 a9e:	61 f0       	breq	.+24     	; 0xab8 <__fp_cmp+0x46>
 aa0:	23 2b       	or	r18, r19
 aa2:	24 2b       	or	r18, r20
 aa4:	25 2b       	or	r18, r21
 aa6:	21 f4       	brne	.+8      	; 0xab0 <__fp_cmp+0x3e>
 aa8:	08 95       	ret
 aaa:	0a 26       	eor	r0, r26
 aac:	09 f4       	brne	.+2      	; 0xab0 <__fp_cmp+0x3e>
 aae:	a1 40       	sbci	r26, 0x01	; 1
 ab0:	a6 95       	lsr	r26
 ab2:	8f ef       	ldi	r24, 0xFF	; 255
 ab4:	81 1d       	adc	r24, r1
 ab6:	81 1d       	adc	r24, r1
 ab8:	08 95       	ret

00000aba <__umulhisi3>:
 aba:	a2 9f       	mul	r26, r18
 abc:	b0 01       	movw	r22, r0
 abe:	b3 9f       	mul	r27, r19
 ac0:	c0 01       	movw	r24, r0
 ac2:	a3 9f       	mul	r26, r19
 ac4:	01 d0       	rcall	.+2      	; 0xac8 <__umulhisi3+0xe>
 ac6:	b2 9f       	mul	r27, r18
 ac8:	70 0d       	add	r23, r0
 aca:	81 1d       	adc	r24, r1
 acc:	11 24       	eor	r1, r1
 ace:	91 1d       	adc	r25, r1
 ad0:	08 95       	ret

00000ad2 <__eerd_byte_m88>:
 ad2:	f9 99       	sbic	0x1f, 1	; 31
 ad4:	fe cf       	rjmp	.-4      	; 0xad2 <__eerd_byte_m88>
 ad6:	92 bd       	out	0x22, r25	; 34
 ad8:	81 bd       	out	0x21, r24	; 33
 ada:	f8 9a       	sbi	0x1f, 0	; 31
 adc:	99 27       	eor	r25, r25
 ade:	80 b5       	in	r24, 0x20	; 32
 ae0:	08 95       	ret

00000ae2 <__eewr_byte_m88>:
 ae2:	26 2f       	mov	r18, r22

00000ae4 <__eewr_r18_m88>:
 ae4:	f9 99       	sbic	0x1f, 1	; 31
 ae6:	fe cf       	rjmp	.-4      	; 0xae4 <__eewr_r18_m88>
 ae8:	1f ba       	out	0x1f, r1	; 31
 aea:	92 bd       	out	0x22, r25	; 34
 aec:	81 bd       	out	0x21, r24	; 33
 aee:	20 bd       	out	0x20, r18	; 32
 af0:	0f b6       	in	r0, 0x3f	; 63
 af2:	f8 94       	cli
 af4:	fa 9a       	sbi	0x1f, 2	; 31
 af6:	f9 9a       	sbi	0x1f, 1	; 31
 af8:	0f be       	out	0x3f, r0	; 63
 afa:	01 96       	adiw	r24, 0x01	; 1
 afc:	08 95       	ret

00000afe <_exit>:
 afe:	f8 94       	cli

00000b00 <__stop_program>:
 b00:	ff cf       	rjmp	.-2      	; 0xb00 <__stop_program>
